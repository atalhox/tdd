{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desenvolvimento de Webservices em Java com TDD","text":""},{"location":"#1-introducao","title":"1. Introdu\u00e7\u00e3o","text":"<p>Test-Driven Development (TDD) \u00e9 uma abordagem de desenvolvimento onde os testes s\u00e3o escritos antes da implementa\u00e7\u00e3o do c\u00f3digo. Isso garante que o software seja desenvolvido com qualidade, cobertura de testes adequada e redu\u00e7\u00e3o de bugs.</p> <p>Este documento aborda o desenvolvimento de um webservice em Java utilizando Spring Boot e JUnit 5, seguindo os princ\u00edpios do TDD. Ser\u00e3o apresentados exemplos pr\u00e1ticos da hierarquia de testes, desde models at\u00e9 repositories, services, controllers, e boas pr\u00e1ticas para otimiza\u00e7\u00e3o de testes quando o prazo \u00e9 curto.</p>"},{"location":"#2-objetivo","title":"2. Objetivo","text":"<p>O objetivo deste documento \u00e9 fornecer um guia pr\u00e1tico para a aplica\u00e7\u00e3o de TDD no desenvolvimento de um webservice em Java, garantindo testes eficazes e entendendo quais s\u00e3o essenciais e quais podem ser omitidos em cen\u00e1rios de prazo reduzido.</p>"},{"location":"#3-publico-alvo","title":"3. P\u00fablico-alvo","text":"<ul> <li>Desenvolvedores Java</li> <li>Arquitetos de Software</li> <li>Engenheiros de Qualidade de Software (QA)</li> <li>Equipes de DevOps</li> <li>Interessados em boas pr\u00e1ticas de desenvolvimento</li> </ul>"},{"location":"#4-hierarquia-dos-testes","title":"4. Hierarquia dos Testes","text":"<p>A estrutura de testes segue uma hierarquia clara para garantir a cobertura de todas as camadas do sistema:</p> <pre><code>graph TD;\n    Model--&gt;Repository;\n    Repository--&gt;Service;\n    Service--&gt;Controller;\n    Controller--&gt;IntegrationTest;\n</code></pre> <p>Cada camada tem um conjunto de testes espec\u00edfico, descrito a seguir:</p>"},{"location":"#41-model-tests","title":"4.1. Model Tests","text":"<p>Os testes de modelo verificam se as entidades possuem os atributos corretos, valida\u00e7\u00f5es e comportamento esperado.</p> <p>Exemplo: <pre><code>import static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\n\nclass UserTest {\n    @Test\n    void shouldCreateUser() {\n        User user = new User(\"John Doe\", \"john.doe@example.com\");\n        assertThat(user.getName()).isEqualTo(\"John Doe\");\n        assertThat(user.getEmail()).isEqualTo(\"john.doe@example.com\");\n    }\n}\n</code></pre></p>"},{"location":"#42-repository-tests","title":"4.2. Repository Tests","text":"<p>Os testes de reposit\u00f3rio garantem que a intera\u00e7\u00e3o com o banco de dados funciona corretamente.</p> <p>Exemplo: <pre><code>import static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n\n@DataJpaTest\nclass UserRepositoryTest {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldSaveAndFindUser() {\n        User user = new User(\"Jane Doe\", \"jane.doe@example.com\");\n        userRepository.save(user);\n        User foundUser = userRepository.findByEmail(\"jane.doe@example.com\");\n        assertThat(foundUser).isNotNull();\n        assertThat(foundUser.getName()).isEqualTo(\"Jane Doe\");\n    }\n}\n</code></pre></p>"},{"location":"#43-service-tests","title":"4.3. Service Tests","text":"<p>Os testes de servi\u00e7o validam a l\u00f3gica de neg\u00f3cio sem depender de infraestrutura externa.</p> <p>Exemplo: <pre><code>import static org.mockito.Mockito.*;\nimport static org.assertj.core.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldReturnUserWhenEmailExists() {\n        User user = new User(\"Alice\", \"alice@example.com\");\n        when(userRepository.findByEmail(\"alice@example.com\")).thenReturn(user);\n\n        User foundUser = userService.getUserByEmail(\"alice@example.com\");\n        assertThat(foundUser).isNotNull();\n        assertThat(foundUser.getName()).isEqualTo(\"Alice\");\n    }\n}\n</code></pre></p>"},{"location":"#44-controller-tests","title":"4.4. Controller Tests","text":"<p>Os testes de controlador garantem que a API responde corretamente a diferentes solicita\u00e7\u00f5es.</p> <p>Exemplo: <pre><code>import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@WebMvcTest(UserController.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    void shouldReturnUserByEmail() throws Exception {\n        mockMvc.perform(get(\"/users/email?email=john.doe@example.com\"))\n                .andExpect(status().isOk());\n    }\n}\n</code></pre></p>"},{"location":"#45-integration-tests","title":"4.5. Integration Tests","text":"<p>Testes de integra\u00e7\u00e3o garantem que os componentes funcionam corretamente em conjunto.</p> <p>Exemplo: <pre><code>import org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ApplicationTests {\n    @Test\n    void contextLoads() {\n    }\n}\n</code></pre></p>"},{"location":"#5-testes-essenciais-vs-opcionais-em-prazos-curtos","title":"5. Testes Essenciais vs. Opcionais em Prazos Curtos","text":""},{"location":"#testes-essenciais","title":"Testes Essenciais","text":"<ol> <li>Service Tests: Validam a l\u00f3gica de neg\u00f3cio, evitando erros cr\u00edticos.</li> <li>Repository Tests: Garantem que os acessos ao banco de dados funcionam corretamente.</li> <li>Controller Tests: Validam que a API responde conforme esperado.</li> </ol>"},{"location":"#testes-opcionais-em-prazos-curtos","title":"Testes Opcionais em Prazos Curtos","text":"<ol> <li>Model Tests: Podem ser omitidos se as entidades forem simples.</li> <li>Integration Tests: Custosos e demorados; podem ser reduzidos se as demais camadas estiverem bem testadas.</li> <li>UI Tests (se aplic\u00e1vel): Testes end-to-end (E2E) podem ser deixados para momentos de maior disponibilidade.</li> </ol> <p>Dica</p> <p>Utilize mocks para testes mais r\u00e1pidos e independentes.</p>"},{"location":"#6-referencias","title":"6. Refer\u00eancias","text":"<ul> <li>Spring Boot Documentation</li> <li>JUnit 5 Documentation</li> <li>Mockito Documentation</li> </ul>"}]}